"""
File: etl_sql_modeling.py
Author: @AyoubFrihaoui
Date: 03-25-2025

Description:
-------------
This script reads caregiver profile data from a CSV file (e.g., aggregated_profiles.csv), models it into a
3rd Normal Form (3NF) schema, and inserts it into a relational database using SQLAlchemy. The schema is
split across multiple tables to avoid repetition and maintain data integrity. Below is an outline of the
tables (in 3NF style):

Main Table: caregivers
----------------------
- caregiver_id (PK) - int
- vertical_id - str
- display_name - str
- first_name - str (nullable)
- member_type - str (nullable)
- summary - text (nullable)
- hourly_rate - float (nullable)
- years_of_experience - float (nullable)
- photo_url - str (nullable)
- days_since_last_login - int (nullable)
- premium_status - str (nullable)
- location - str (nullable)
- member_since - str (nullable)  # or date if you parse it
- age - int (nullable)
- bookmarked - bool (nullable)
- reviewed - bool (nullable)
- able_to_review - bool (nullable)
- response_rate - float (nullable)
- currency_symbol - str (nullable)
- postal_code - str (nullable)
- city - str (nullable)

Many-to-One or One-to-Many Tables (One caregiver can have many of these):
------------------------------------------------------------------------
- caregiver_source_folders  ( caregiver_id [FK], source_folder )
- caregiver_languages       ( caregiver_id [FK], language )
- caregiver_qualifications ( caregiver_id [FK], qualification )
- caregiver_documents      ( caregiver_id [FK], document )
- caregiver_about_details  ( caregiver_id [FK], about_detail )
- caregiver_highlights     ( caregiver_id [FK], highlight )
- caregiver_services       ( caregiver_id [FK], service_type )
- caregiver_experiences    ( caregiver_id [FK], experience_type )
- caregiver_verifications  ( caregiver_id [FK], verified_item, verified bool? )
- caregiver_links          ( caregiver_id [FK], href, rel, link_type, etc. )
- caregiver_reviews        ( caregiver_id [FK], rating, reviewer_display_name, etc.)

Usage:
------
1. Configure the DATABASE_URI with your DB credentials (PostgreSQL, MySQL, etc.).
2. Ensure aggregated_profiles.csv is generated by your prior pipeline and is accessible.
3. Run:  python etl_sql_modeling.py
   This will create all tables (if not existing) and insert data in a 3NF manner.

Enterprise Best Practices:
--------------------------
- Logging for each major step (connecting to DB, reading CSV, inserting rows).
- Using SQLAlchemy ORM for maintainable, scalable code.
- Clear separation of concerns (models vs. ETL logic).
- 3NF design to avoid data duplication and ensure data integrity.

"""

import os
import sys
import csv
import ast
import logging
import pandas as pd
from typing import List, Optional
from sqlalchemy import (
    create_engine, Column, Integer, String, Float, Boolean, ForeignKey, Text
)
from sqlalchemy.orm import (
    declarative_base, relationship, sessionmaker, Session
)
from sqlalchemy.exc import IntegrityError

# ---------------------------------------------------------------------------
# Configuration
# ---------------------------------------------------------------------------
DATABASE_URI = "postgresql://user:password@localhost:5432/care_db"  # Example for PostgreSQL
CSV_FILE_PATH = "data/processed/aggregated_profiles.csv"
LOG_LEVEL = logging.INFO

logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s - %(levelname)s - %(message)s",
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

Base = declarative_base()

# ---------------------------------------------------------------------------
# SQLAlchemy Models (3NF) - "caregiver" naming
# ---------------------------------------------------------------------------
class Caregiver(Base):
    __tablename__ = "caregivers"

    caregiver_id = Column(Integer, primary_key=True, autoincrement=False)
    vertical_id = Column(String, nullable=False)
    display_name = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    member_type = Column(String, nullable=True)
    summary = Column(Text, nullable=True)
    hourly_rate = Column(Float, nullable=True)
    years_of_experience = Column(Float, nullable=True)
    photo_url = Column(String, nullable=True)
    days_since_last_login = Column(Integer, nullable=True)
    premium_status = Column(String, nullable=True)
    location = Column(String, nullable=True)
    member_since = Column(String, nullable=True)  # or DateTime if you parse it
    age = Column(Integer, nullable=True)
    bookmarked = Column(Boolean, nullable=True)
    reviewed = Column(Boolean, nullable=True)
    able_to_review = Column(Boolean, nullable=True)
    response_rate = Column(Float, nullable=True)
    currency_symbol = Column(String, nullable=True)
    postal_code = Column(String, nullable=True)
    city = Column(String, nullable=True)

    # Relationships
    source_folders = relationship("CaregiverSourceFolder", back_populates="caregiver", cascade="all, delete-orphan")
    languages = relationship("CaregiverLanguage", back_populates="caregiver", cascade="all, delete-orphan")
    qualifications = relationship("CaregiverQualification", back_populates="caregiver", cascade="all, delete-orphan")
    documents = relationship("CaregiverDocument", back_populates="caregiver", cascade="all, delete-orphan")
    about_details = relationship("CaregiverAboutDetail", back_populates="caregiver", cascade="all, delete-orphan")
    highlights = relationship("CaregiverHighlight", back_populates="caregiver", cascade="all, delete-orphan")
    services = relationship("CaregiverService", back_populates="caregiver", cascade="all, delete-orphan")
    experiences = relationship("CaregiverExperience", back_populates="caregiver", cascade="all, delete-orphan")
    verifications = relationship("CaregiverVerification", back_populates="caregiver", cascade="all, delete-orphan")
    links = relationship("CaregiverLink", back_populates="caregiver", cascade="all, delete-orphan")
    reviews = relationship("CaregiverReview", back_populates="caregiver", cascade="all, delete-orphan")

class CaregiverSourceFolder(Base):
    __tablename__ = "caregiver_source_folders"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    source_folder = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="source_folders")

class CaregiverLanguage(Base):
    __tablename__ = "caregiver_languages"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    language = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="languages")

class CaregiverQualification(Base):
    __tablename__ = "caregiver_qualifications"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    qualification = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="qualifications")

class CaregiverDocument(Base):
    __tablename__ = "caregiver_documents"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    document = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="documents")

class CaregiverAboutDetail(Base):
    __tablename__ = "caregiver_about_details"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    about_detail = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="about_details")

class CaregiverHighlight(Base):
    __tablename__ = "caregiver_highlights"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    highlight = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="highlights")

class CaregiverService(Base):
    __tablename__ = "caregiver_services"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    service_type = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="services")

class CaregiverExperience(Base):
    __tablename__ = "caregiver_experiences"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    experience_type = Column(String, nullable=False)

    caregiver = relationship("Caregiver", back_populates="experiences")

class CaregiverVerification(Base):
    __tablename__ = "caregiver_verifications"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    verified_item = Column(String, nullable=False)
    verified = Column(Boolean, nullable=True)

    caregiver = relationship("Caregiver", back_populates="verifications")

class CaregiverLink(Base):
    __tablename__ = "caregiver_links"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    href = Column(String, nullable=True)
    rel = Column(String, nullable=True)
    link_type = Column(String, nullable=True)

    caregiver = relationship("Caregiver", back_populates="links")

class CaregiverReview(Base):
    __tablename__ = "caregiver_reviews"

    id = Column(Integer, primary_key=True, autoincrement=True)
    caregiver_id = Column(Integer, ForeignKey("caregivers.caregiver_id"), nullable=False)
    rating = Column(Float, nullable=True)
    reviewer_display_name = Column(String, nullable=True)
    reviewer_photo_url = Column(String, nullable=True)
    date_created = Column(String, nullable=True)
    content = Column(Text, nullable=True)
    reply_date_created = Column(String, nullable=True)
    reply_content = Column(Text, nullable=True)

    caregiver = relationship("Caregiver", back_populates="reviews")

# ---------------------------------------------------------------------------
# ETL Logic
# ---------------------------------------------------------------------------
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

def main():
    engine = create_engine(DATABASE_URI, echo=False)
    SessionLocal = sessionmaker(bind=engine)
    session = SessionLocal()

    Base.metadata.create_all(engine)

    if not os.path.exists(CSV_FILE_PATH):
        logger.error(f"CSV file not found at {CSV_FILE_PATH}. Exiting.")
        return

    df = pd.read_csv(CSV_FILE_PATH, encoding="utf-8")
    logger.info(f"Loaded {len(df)} rows from CSV.")

    try:
        insert_caregivers(df, session)
        session.commit()
        logger.info("Data inserted successfully!")
    except IntegrityError as e:
        logger.error(f"Integrity error: {e}")
        session.rollback()
    except Exception as e:
        logger.error(f"Error inserting data: {e}")
        session.rollback()
    finally:
        session.close()

def insert_caregivers(df: pd.DataFrame, session: Session):
    """
    Iterates over each row in the aggregated DataFrame and inserts caregiver + related data
    into the database respecting the 3NF schema.
    """
    for idx, row in df.iterrows():
        caregiver_id = row.get("id")
        if pd.isnull(caregiver_id):
            continue
        caregiver_id = int(caregiver_id)
        caregiver_obj = session.query(Caregiver).filter_by(caregiver_id=caregiver_id).one_or_none()
        if not caregiver_obj:
            caregiver_obj = Caregiver(caregiver_id=caregiver_id)

        caregiver_obj.vertical_id = str(row.get("verticalId", "")) or ""
        caregiver_obj.display_name = str(row.get("displayName", "")) or None
        caregiver_obj.first_name = str(row.get("firstName", "")) or None
        caregiver_obj.member_type = str(row.get("memberType", "")) or None
        caregiver_obj.summary = str(row.get("summary", "")) or None
        caregiver_obj.hourly_rate = float(row["hourlyRate"]) if not pd.isnull(row.get("hourlyRate")) else None
        caregiver_obj.years_of_experience = float(row["yearsOfExperience"]) if not pd.isnull(row.get("yearsOfExperience")) else None
        caregiver_obj.photo_url = str(row.get("photoUrl", "")) or None
        caregiver_obj.days_since_last_login = int(row["daysSinceLastLogin"]) if not pd.isnull(row.get("daysSinceLastLogin")) else None
        caregiver_obj.premium_status = str(row.get("premiumStatus", "")) or None
        caregiver_obj.location = str(row.get("location", "")) or None
        caregiver_obj.member_since = str(row.get("memberSince", "")) or None
        caregiver_obj.age = int(row["age"]) if not pd.isnull(row.get("age")) else None
        caregiver_obj.bookmarked = bool(row["bookmarked"]) if not pd.isnull(row.get("bookmarked")) else None
        caregiver_obj.reviewed = bool(row["reviewed"]) if not pd.isnull(row.get("reviewed")) else None
        caregiver_obj.able_to_review = bool(row["ableToReview"]) if not pd.isnull(row.get("ableToReview")) else None
        caregiver_obj.response_rate = float(row["responseRate"]) if not pd.isnull(row.get("responseRate")) else None
        caregiver_obj.currency_symbol = str(row.get("currencySymbol", "")) or None
        caregiver_obj.postal_code = str(row.get("postal_code", "")) or None
        caregiver_obj.city = str(row.get("city", "")) or None

        session.add(caregiver_obj)
        session.flush()

        # Insert related tables. Remove old entries to avoid duplicates if re-run.
        session.query(CaregiverSourceFolder).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "source_folder" in row and not pd.isnull(row["source_folder"]):
            folder_values = parse_list_field(row["source_folder"])
            for folder in folder_values:
                caregiver_obj.source_folders.append(CaregiverSourceFolder(source_folder=str(folder)))

        session.query(CaregiverLanguage).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "languages" in row and not pd.isnull(row["languages"]):
            languages = parse_list_field(row["languages"])
            for lang in languages:
                caregiver_obj.languages.append(CaregiverLanguage(language=str(lang)))

        session.query(CaregiverQualification).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "qualifications" in row and not pd.isnull(row["qualifications"]):
            qualifications = parse_list_field(row["qualifications"])
            for qual in qualifications:
                caregiver_obj.qualifications.append(CaregiverQualification(qualification=str(qual)))

        session.query(CaregiverDocument).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "documents" in row and not pd.isnull(row["documents"]):
            documents = parse_list_field(row["documents"])
            for doc in documents:
                caregiver_obj.documents.append(CaregiverDocument(document=str(doc)))

        session.query(CaregiverAboutDetail).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "aboutDetails" in row and not pd.isnull(row["aboutDetails"]):
            abouts = parse_list_field(row["aboutDetails"])
            for ad in abouts:
                caregiver_obj.about_details.append(CaregiverAboutDetail(about_detail=str(ad)))

        session.query(CaregiverHighlight).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "highlights" in row and not pd.isnull(row["highlights"]):
            highlights = parse_list_field(row["highlights"])
            for hi in highlights:
                caregiver_obj.highlights.append(CaregiverHighlight(highlight=str(hi)))

        session.query(CaregiverService).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "services" in row and not pd.isnull(row["services"]):
            services = parse_list_field(row["services"])
            for srv in services:
                caregiver_obj.services.append(CaregiverService(service_type=str(srv)))

        session.query(CaregiverExperience).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "experience" in row and not pd.isnull(row["experience"]):
            experiences = parse_list_field(row["experience"])
            for exp in experiences:
                caregiver_obj.experiences.append(CaregiverExperience(experience_type=str(exp)))

        session.query(CaregiverVerification).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "verifications" in row and not pd.isnull(row["verifications"]):
            verif_list = parse_list_field(row["verifications"])
            for v in verif_list:
                verified_item = v.get("verifiedItem", "")
                verified_val = v.get("verified", None)
                caregiver_obj.verifications.append(CaregiverVerification(
                    verified_item=str(verified_item),
                    verified=bool(verified_val) if verified_val is not None else None
                ))

        session.query(CaregiverLink).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "links" in row and not pd.isnull(row["links"]):
            link_list = parse_list_field(row["links"])
            for ln in link_list:
                href = ln.get("href", "")
                rel = ln.get("rel", "")
                link_type = ln.get("type", "")
                caregiver_obj.links.append(CaregiverLink(
                    href=str(href),
                    rel=str(rel),
                    link_type=str(link_type)
                ))

        session.query(CaregiverReview).filter_by(caregiver_id=caregiver_obj.caregiver_id).delete()
        if "reviews" in row and not pd.isnull(row["reviews"]):
            review_list = parse_list_field(row["reviews"])
            for rv in review_list:
                caregiver_obj.reviews.append(CaregiverReview(
                    rating=float(rv.get("rating")) if rv.get("rating") is not None else None,
                    reviewer_display_name=str(rv.get("reviewer", {}).get("displayName", "")),
                    reviewer_photo_url=str(rv.get("reviewer", {}).get("photoUrl", "")),
                    date_created=str(rv.get("dateCreated", "")),
                    content=str(rv.get("content", "")) if rv.get("content") else None,
                    reply_date_created=str(rv.get("reply", {}).get("dateCreated", "")),
                    reply_content=str(rv.get("reply", {}).get("content", "")) if rv.get("reply", {}).get("content") else None
                ))

        session.add(caregiver_obj)

def parse_list_field(value):
    """
    Safely parse a string representation of a list or dictionary into a Python object.
    If it's already a list/dict, return as is. If it's NaN or empty, return [].
    """
    if pd.isnull(value):
        return []
    if isinstance(value, list):
        return value
    if isinstance(value, str):
        val_str = value.strip()
        if not val_str or val_str in ("[]", "{}"):
            return []
        try:
            parsed = ast.literal_eval(val_str)
            if isinstance(parsed, (list, dict)):
                return parsed if isinstance(parsed, list) else [parsed]
            else:
                # fallback if it's a single string
                return [val_str]
        except:
            # if it fails, assume it's just a single string
            return [val_str]
    # fallback
    return []

if __name__ == "__main__":
    main()
